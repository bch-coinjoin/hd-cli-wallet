/*
  This library is handles transactions.
*/

// Local libraries
const AppUtils = require('../util')

class Transactions {
  constructor () {
    // Encapsulate dependencies
    this.util = new AppUtils()
  }

  // This function takes an unsigned TX as input, as well as an array of UTXOs
  // belonging to this wallet (which are included in the unsigned TX).
  // It signs the inputs of the TX for the UTXOs belonging to this wallet,
  // then sends the partially-signed TX back to the colab-coinjoin-api.
  async signCoinJoinTx (inObj = {}) {
    try {
      const { unsignedHex, utxosToSign, walletInfo } = inObj
      console.log('unsignedHex: ', unsignedHex)
      console.log(`utxosToSign: ${JSON.stringify(utxosToSign, null, 2)}`)
      console.log(`walletInfo: ${JSON.stringify(walletInfo, null, 2)}`)

      // Loop through each UTXO and get the private key for it
      for (let i = 0; i < utxosToSign.length; i++) {
        const thisUtxo = utxosToSign[i]

        const hdData = await this.util.getPrivateKey(walletInfo, thisUtxo.hdIndex)

        if (hdData.cashAddress !== thisUtxo.address) {
          throw new Error('Addresses generated by HD index do not match')
        }

        thisUtxo.wif = hdData.wif
      }
      console.log(`utxos after adding WIF: ${JSON.stringify(utxosToSign, null, 2)}`)
    } catch (err) {
      console.error('Error in signCoinJoinTx()')
      throw err
    }
  }
}

module.exports = Transactions
